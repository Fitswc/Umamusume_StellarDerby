###	前期准备	#################################################################################
给mod确定一个$MOD缩写$, 如舰R就是他们通用缩写"wsg", 远古科技库就是"ACOT", 以此类推.
这是为了确定这些内容来自哪个mod, 方便以后维护.

兼容补丁的制作主要是面向岗位, 所以分析岗位内容是第一步.




##	清理自动岗位	#########################################
在\common\pop_jobs文件夹中搜索"is_capped_by_modifier",如果值为"no"那么这个岗位你就需要注意了
以"servant"岗位为例
#	改动前
servant = {
	category = worker	#|阶层属性|	如果值为"purge/assimilation"那么你不需要对这个岗位进行改动
	is_capped_by_modifier = no	#这表示这是一个|自动岗位|,这时候你需要查看|阶层属性|决定是否进行改动
	building_icon = building_luxury_residence
	clothes_texture_index = 2

	possible_pre_triggers = { is_sapient = yes }
	possible = {#条件,这里就是你需要改动的组件
		can_take_servant_job = yes	#自动岗位是否会添加给失业人口的条件,你需要对这里进行改动
	}
	...省略
}
#	改动后
servant = {
	...省略
	possible = {
		can_take_servant_job = yes
		#	|PR转化|	这条注释,以及下面两行是你需要添加的内容,所有的自动岗位都这么改就可以,这会使得此自动岗位不出现在产业革命的殖民地
		exists = planet
		planet = { PR_trgr_plnt_VALID = no }
	}
	...省略
}


##	确定按人数增长的岗位类型	#########################################
在\common文件夹中搜索"per_pop"
记录搜索到的结果中的"岗位名称"
结果格式一般为"job_$岗位$_per_pop"其中$$里面就是岗位名称
#	举例
job_priest_per_pop	#其中	"priest"就是岗位名称
如果没有搜索结果,那么就没有按人数增长的岗位




###	建立转化岗位文件	#################################################################################
MOD的岗位文件在\common\pop_jobs文件夹里
首先将需要转化的岗位所在的文件复制, 存放到你新建的兼容mod里的同路径下
比如你要给"02_specialist_jobs.txt"这个文件里的岗位做兼容, 那么你把它复制到你的兼容mod\common\pop_jobs文件夹里
然后改名为"PR_jobs_CORE_02_specialist_jobs.txt"

打开文件, 删掉不需要兼容的岗位内容, 只留下需要兼容的
以"priest"为例,只改动有注释的部分
priest = {#|原岗位名|	改为"PR_job_CONVERT_priest"
	category = specialist	#|阶层属性|	注意这个属性, 写weight的时候要用到
	condition_string = SPECIALIST_JOB_TRIGGER
	building_icon = building_temple
	clothes_texture_index = 3
	
	# 新增
	icon = priest	# |图标|	如果岗位对象本来就有"icon=XXX",那就直接引用,如果没有就新建一个"icon = $原岗位名$"
	inline_script = { script = "jobs/PR_trgr_pop_modifier_JOB_integrated_VAR"		JOB = priest }	#JOB = $原岗位名$

	possible_pre_triggers = {
		has_owner = yes
		is_being_purged = no
		is_being_assimilated = no
		is_sapient = yes
	}

	possible_precalc = can_fill_specialist_job
	possible = {
		complex_specialist_job_check_trigger = yes
	}

	resources = {
		category = planet_priests	#|行业属性|	后面会用到
		produces = {
			unity = 4
			mult = planet.value:PR_prmt_sv_plnt_JOB_efficiency|CHAIN|culture|JOB|priest|	#_|PR参数|
			# 新增
			# JOB后面写"原岗位名"
			# CHAIN为|产业属性|	后面写"general/power/mining/farming/factory/foundry/research/culture/refining"分别对应着"默认/发电/采矿/农业/消费品/冶金/科研/凝聚力/高级资源"几个领域, 如果你没法分辨那直接写"general"
		}
		upkeep = {
			consumer_goods = 2
			mult = planet.value:PR_prmt_sv_plnt_JOB_efficiency|CHAIN|culture|JOB|priest|	#_|PR参数|
			# 新增, 同上, 注意所有经济产出"resources"中的组件都要写, 如果有"overlord_resources",里面的组件也要写
		}
	}

	triggered_planet_modifier = {
		potential = {
			always = yes
		}
		planet_amenities_add = 2
		mult = value:scripted_modifier_mult|MODIFIER|pop_job_amenities_mult|
		mult = planet.value:PR_prmt_sv_plnt_JOB_efficiency|JOB|priest|	#_|PR参数|
		# 新增, 同上, 但是不用写|CHAIN|类型|, 只写|JOB|旧岗位名|这一栏即可
		# 注意, 这是修正, 修正组件有三种"pop_modifier/planet_modifier/country_modifier"
		# 如果前面带"triggered_", 如"triggered_planet_modifier", 那么直接写|PR参数|
		# 如果前面不带"triggered_", 那么先加上"triggered_", 再写|PR参数|
		
		# 一个特例
		# 如果提供的修正是"pop_defense_armies_add = 数值" 那么你要把它改成"PR_smod_plnt_MOD_defense_armies_add = 数值"	然后再写|PR参数|
	}

	triggered_planet_modifier = {
		potential = {
			planet = {
				has_active_building = building_league_offices
			}
		}
		planet_amenities_add = 1
		mult = value:scripted_modifier_mult|MODIFIER|pop_job_amenities_mult|
		mult = planet.value:PR_prmt_sv_plnt_JOB_efficiency|JOB|priest|	#_|PR参数|
		# 新增, 同上
	}

	triggered_country_modifier = {
		potential = {
			exists = owner
			owner = { has_valid_civic = civic_efficient_bureaucracy }
		}
		country_edict_fund_add = 2
		mult = value:job_total_output_modifier|JOB|priest|RESOURCE|unity|
		mult = planet.value:PR_prmt_sv_plnt_JOB_efficiency|JOB|priest|	#_|PR参数|
		# 新增, 同上
	}

	weight = {
		inline_script = { script = "jobs/PR_weight_JOB_convert"		SVAR = specialist JOB = priest }	#_|PR参数|
		# 替换原有组件内容, 也就是原有的"weight内容"全部去掉
		# JOB还是写"原岗位名"
		# SVAR写"ruler/specialist/worker/complex_drone/simple_drone/default"中的一个, 按照|阶层属性|写即可, 如果是这几个以外的, 统一写"default"
		
		# 去掉下面这些
		weight = @specialist_job_weight
		mult = value:job_weights_modifier|JOB|priest|RESOURCE|unity|
		mult = value:scripted_modifier_job_weight_mult|MODIFIER|pop_job_amenities_mult|
		modifier = {
			factor = 0.2
			has_citizenship_rights = no
			NOT = { has_trait = trait_mechanical }
		}
		modifier = {
			factor = 2
			exists = owner
			owner = { has_civic = civic_exalted_priesthood }
		}
		modifier = {
			factor = 0.1
			can_take_servant_job = yes
		}
		modifier = {
			factor = 1.5
			has_job = priest
		}
		modifier = {
			factor = 0.1
			is_enslaved = yes
			has_slavery_type = { type = slavery_indentured }
		}
	}
}

新建对应的loc内容
 job_PR_job_CONVERT_原岗位名:0 "$MANJOB$$job_原岗位名$"
 job_PR_job_CONVERT_原岗位名_plural:0 "$job_PR_job_CONVERT_原岗位名$"
 job_PR_job_CONVERT_原岗位名_desc:0 "$job_原岗位名_desc$\n$PR_tips_EFFICIENCY_产业属性$"
 mod_job_PR_job_CONVERT_原岗位名_add:0 "$job_PR_job_CONVERT_原岗位名$"
# 除了原岗位名, 只需要注意"产业属性", 也就是前面|PR参数|里|CHAIN|对应的值




###	转化地块	#################################################################################
在\common\deposits文件夹中新建"地块文件", 命名为"PR_deposits_$MOD缩写$"
文件内容如下:
#	地块对象, 用于提供转化岗位
#	注意你不需要给每个mod只建立一个地块对象, 有的mod会按照内部阵营提供许多岗位, 那么你可能需要按照阵营建立地块, 并且用阵营名称作为其"次级名称"
#	例如舰R的深海阵营, 其地块就可以命名为"PR_deposit_JOB_convert_swg_shenhai"
PR_deposit_JOB_convert_$MOD缩写$_$次级名称$ = {
	is_for_colonizable = yes
	category = deposit_cat_rare
	should_swap_deposit_on_terraforming = no
	drop_weight = { weight = 0 }
	
	##	02_specialist_jobs		#我一般会按照岗位所属文件打个分组标签, 方便维护, 注意, 所有你需要转化的岗位都要写
	inline_script = { script = "deposits/PR_deposit_job_convert_TRGR_modifiers"				CAT = planet_researchers	JOB = dimensional_portal_researcher_gestalt }
	# 类型一: 不存在|按人口增加|的普通岗位
	# JOB = 原岗位名
	# CAT = 原岗位对应的|行业属性|
	inline_script = { script = "deposits/PR_deposit_job_convert_TRGR_modifiers_PER"			CAT = planet_jobs			JOB = gas_plant_engineer_gestalt }
	# 类型二: 存在|按人口增加|的"per_pop"岗位 ,内容同上, 注意script名称
	
}

新建对应的loc内容, 例如:
 PR_deposit_JOB_convert_VANILLA_regular:0 "$PR_deposit_JOB_convert$§B深海舰娘§!"	# 除了"深海舰娘", 其他都引用一样的东西
 PR_deposit_JOB_convert_VANILLA_regular_desc: "$PR_deposit_JOB_convert_desc$"
新建对应的图标文件
 在gfx\icons\deposits文件夹中, 建立一个同名dds文件, 可以复制其他地块的, 大小和格式啥的也参考其他地块, 名字与地块对象名相同




###	转化脚本	#################################################################################
在\common\on_actions文件夹中新建"触发文件", 命名为"PR_on_actions_补丁MOD缩写", 所有触发事件都在这一个文件里触发就行
文件内容如下:
PR_on_planet_JOB_convert_READY = {
	events = {
		触发事件.1
		触发事件.2
		触发事件.3
		...
	}
}


在\events文件夹里新建"事件脚本文件", 命名为"PR_evts_补丁MOD缩写", 可以所有事件脚本都放在一个文件里, 也可以分开, 怎么方便怎么来
注意: 每个事件对应一个"转化地块"
#例子, 参考产业革命主MOD里的	PR_evts_CORE.txt\PR_evt_CORE.3+
文件内容如下:
namespace = PR_evt_补丁MOD缩写	# 事件题头, 可以自己随意起, 只要方便维护
planet_event = {
	id = PR_evt_补丁MOD缩写.1
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		OR = {
			AND = { exists = owner		owner = { is_gestalt = yes } }	# 基本条件	|星球域|, 各个MOD都不同, 比如舰R就肯定是"舰R种族的星球"或者国家是"舰R政体"
			has_deposit = PR_deposit_JOB_convert_$MOD缩写$_$次级名称$	# 用于自我清理, 地块文件很吃运算, 不用的时候就清理掉
		}
	}
	
	immediate = {
		# 注意, 下述effect分两组, 上面那组添加, 下面那组清除, 每一组的内容和"转化地块"中的岗位一一对应
	
		###	统计	|符合基本条件|
		if = { limit = { exists = owner		owner = { is_gestalt = yes } }	# 基本条件
			##	变量TALLY
			#	00_other_jobs.txt	# 岗位文件标签
			PR_prmt_eft_plnt_JOB_convert_TALLY = { DEP = $MOD缩写$_$次级名称$	JOB = 原岗位名 }
			# 类型一: 不存在|按人口增加|的普通岗位
			# JOB = 原岗位名
			# DEP = $MOD缩写$_$次级名称$	就是对应的地块后半部分
			PR_prmt_eft_plnt_JOB_convert_TALLY_per = { DEP = $MOD缩写$_$次级名称$	JOB = 原岗位名 }
			# 类型二: 存在|按人口增加|的"per_pop"岗位 ,内容同上, 注意名称的不同

			##	地块添加
			PR_prmt_eft_plnt_JOB_convert_END = { DEP = $MOD缩写$_$次级名称$ }
		}
		
		###	清理	|不符合基本条件且存在"转化地块"|
		else_if = { limit = { has_deposit = PR_deposit_JOB_convert_$MOD缩写$_$次级名称$ }
			##	地块CLEAN
			remove_deposit = PR_deposit_JOB_convert_$MOD缩写$_$次级名称$
			
			##	变量CLEAN
			#	00_other_jobs.txt	# 岗位文件标签
			PR_prmt_eft_plnt_JOB_convert_CLEAN = { JOB = 原岗位名 }
			PR_prmt_eft_plnt_JOB_convert_CLEAN = { JOB = 原岗位名 }
			# 注意: 无论是"普通岗位"还是"per_pop岗位", effect名称都是一样的
			# "清理组件"中的岗位项目和前面"统计组件"中的一一对应
		}
	}
}




###	后记	#################################################################################
产业革命的脚本已经高度模块化, 制作兼容是很简单的, 但是总有mod会有一些奇怪的功能, 这时候你就要求助于小伞了
然后我们会有统一的兼容mod, 如果你是独立制作者, 可以考虑加入我们的总兼容mod